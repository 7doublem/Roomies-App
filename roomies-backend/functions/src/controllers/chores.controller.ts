import {Request, Response, NextFunction} from "express";
import {getFirestore, Timestamp} from "firebase-admin/firestore";

const statusOptions = ["todo", "doing", "done"];

export type Chore = {
  // id: string; generated by firebase
  // groupId: string,
  name: string,
  description: string | null, // optional
  rewardPoints: number,
  startDate: number,
  dueDate: number,
  assignedTo: string | null, // optional
  // countdown: function to generates reward points
  status: string,
  createdBy: string, // generated
};

export class ChoreController {
  // POST /groups/:group_id/chores - create a new chore
  static async createChoreByGroupId(req: Request, res: Response, next: NextFunction) {
    try {
      const groupId = req.params.group_id;
      const creatorUid = req.user?.uid;
      const {name, description, rewardPoints, startDate, dueDate, assignedTo, status} = req.body as Chore;

      if (!creatorUid) {
        res.status(401).json({message: "Unauthorised"});
        return;
      }

      if (
        !name ||
        !rewardPoints ||
        !dueDate ||
        !status
      ) {
        res.status(400).send({message: "Name, rewardPoints, dueDate, and status are required"});
        return;
      }

      if (!statusOptions.includes(status)) {
        res.status(400).send({message: "Chore' status must be: todo, doing or done"});
        return;
      }

      const groupRef = getFirestore().collection("groups").doc(groupId);
      const groupDoc = await groupRef.get();

      // const groupDoc = await getFirestore().collection("groups").doc(groupId).get();
      // console.log("GroupDoc", groupDoc.data());

      if (!groupDoc.exists) {
        res.status(404).send({message: "Group not found"});
        return;
      }

      const newChore: Chore = {
        // id: string; generated by firebase
        // groupId,
        name,
        description: description || "", // optional
        rewardPoints,
        startDate: startDate || Timestamp.now().seconds,
        dueDate,
        assignedTo: assignedTo || "", // optional
        status: status || "todo",
        createdBy: creatorUid,
      };

      // const choreRef = await getFirestore().collection("chores").add(newChore);
      const choreRef = await groupRef.collection("chores").add(newChore);
      res.status(201).send({choreId: choreRef.id, ...newChore});
      return;
    } catch (error) {
      console.error(error);
      next(error);
    }
  }

  // GET /groups/:group_id/chores - get all chores by groupId
  static async getAllChoresByGroupId(
    req: Request,
    res: Response,
    next: NextFunction
  ) {
    try {
      const groupId = req.params.group_id;

      const groupRef = await getFirestore().collection("groups").doc(groupId);
      const groupDoc = await groupRef.get();

      if (!groupDoc.exists) {
        res.status(404).send({message: "Group not found"});
        return;
      }

      const choreDocs = await groupRef.collection("chores").get();
      const chores = choreDocs.docs.map((doc) => {
        return {
          id: doc.id,
          ...doc.data(),
        };
      });
      res.status(200).json(chores);
      return;
    } catch (error) {
      console.error(error);
      next(error);
    }
  }

  // PATCH /groups/:group_id/chores/:chore_id - patch a chore by chore_id that is a subcollection of group_id
  static async patchChoreByChoreId(req: Request, res: Response, next: NextFunction) {
    try {
      const groupId = req.params.group_id;
      const choreId = req.params.chore_id;
      const creatorUid = req.user?.uid;
      const {name, description, rewardPoints, startDate, dueDate, assignedTo, status} = req.body as Chore;

      if (!creatorUid) {
        res.status(401).json({message: "Unauthorised"});
        return;
      }

      if (!statusOptions.includes(status)) {
        res.status(400).send({message: "Chore' status must be: todo, doing or done"});
        return;
      }

      const groupRef = getFirestore().collection("groups").doc(groupId);
      const groupDoc = await groupRef.get();

      // const groupDoc = await getFirestore().collection("groups").doc(groupId).get();
      // console.log("GroupDoc", groupDoc.data());

      if (!groupDoc.exists) {
        res.status(404).send({message: "Group not found"});
        return;
      }

      const choreRef = groupRef.collection("chores").doc(choreId);
      const choreDoc = await choreRef.get();

      if (!choreDoc.exists) {
        res.status(404).send({message: "Chore not found"});
        return;
      }

      const updatedChore: Chore = {
        // id: string; generated by firebase
        // groupId,
        name: name || choreDoc.data()?.name,
        description: description || choreDoc.data()?.description,
        rewardPoints: rewardPoints || choreDoc.data()?.rewardPoints,
        startDate: startDate || choreDoc.data()?.startDate,
        dueDate: dueDate || choreDoc.data()?.dueDate,
        assignedTo: assignedTo || choreDoc.data()?.assignedTo,
        status: status || choreDoc.data()?.status,
        createdBy: choreDoc.data()?.createdBy,
      };

      // const newChoreRef = await getFirestore().collection("chores").update(updatedChore);
      await choreRef.update(updatedChore);
      const newChoreRef = groupRef.collection("chores").doc(choreId);
      const newChoreDoc = await newChoreRef.get();

      res.status(201).send({choreId: choreRef.id, ...newChoreDoc.data()});
      return;
    } catch (error) {
      console.error(error);
      next(error);
    }
  }
}
